namespace raw_hybrid_array
{
    #Test
    public fn \"Construct empty"()
    {
        // TODO use named arguments when available
        let subject = Raw_Hybrid_Array[void, never](false, 0, false);
    }

    #Test
    public fn \"Construct array of uninitialized bytes"()
    {
        // TODO use named arguments when available
        let subject = Raw_Hybrid_Array[void, byte](false, 100, false);
    }

    #Test
    public fn \"Construct array of Any"()
    {
        // TODO use named arguments when available
        let subject = Raw_Hybrid_Array[void, Any](false, 100, false);
    }

    #Test
    public fn \"Set and get prefix"()
    {
        // TODO use named arguments when available
        let subject: mut = Raw_Hybrid_Array[byte, never](false, 0, false);

        subject.prefix = 42;
        let result = subject.prefix;

        Assert.that(result).equals(42);
    }

    #Test
    public fn \"Count"()
    {
        // TODO use named arguments when available
        let subject = Raw_Hybrid_Array[void, byte](false, 42, false);

        let result = subject.count;

        Assert.that(result).equals(42);
    }

        #Test
    public fn \"At"()
    {
        // TODO use named arguments when available
        let subject: mut = Raw_Hybrid_Array[void, byte](false, 1, false);

        subject.at(0) = 42;
        var result = subject.at(0);

        Assert.that(result).equals(42);
    }
}
