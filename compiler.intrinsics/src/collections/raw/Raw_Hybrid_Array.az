#Intrinsic
published class Raw_Hybrid_Array[P ind nonwritable out, T ind nonwritable out]
{
    //#Intrinsic
    published /*unsafe*/ init(mut self, ensure_prefix_zeroed: bool, count: size, ensure_zeroed: bool) { INTRINSIC(); }
    //#Intrinsic
    published get prefix(readable self) -> self |> P => INTRINSIC();
    //#Intrinsic
    published get count(self) -> size => INTRINSIC();
    //#Intrinsic
    published /*unsafe*/ fn at(readable self, index: size) -> self |> iref var T => INTRINSIC();
}

/*
#Intrinsic
published class Raw_Hybrid_Array[P ind nonwritable out, Count: size, T ind nonwritable out]
{
    //#Intrinsic
    published unsafe init(mut self, ensure_prefix_zeroed: bool, ensure_zeroed: bool) { INTRINSIC(); }
    //#Intrinsic
    published get prefix(readable self) -> self |> P => INTRINSIC();
    // TODO should generic parameters be publicly exposed members and this getter wouldn't be needed?
    published get count() => Count;
    published unsafe fn at(readable self, index: size) -> self |> iref var T => INTRINSIC();
}
*/
