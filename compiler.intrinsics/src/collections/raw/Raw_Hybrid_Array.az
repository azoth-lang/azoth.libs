/*
#Intrinsic
published class Raw_Hybrid_Array[F, T]
{
    published init(mute self, .fixed, .count, ensureZeroed: bool) {...}
    published var fixed: F;
    published let count: size;
    published unsafe fn at(mut self, index: size) -> iref var T {...};
    published unsafe fn at(self, index: size) -> iref T {...};
}

#Intrinsic
published class Raw_Hybrid_Array[F, Count: size, T]
{
    published init(mut self, .fixed, ensureZeroed: bool) {...}
    published var fixed: F;
    // TODO should generic parameters be publicly exposed members and this getter wouldn't be needed?
    published get count() => Count;
    published unsafe fn at(mut self, index: size) -> iref var T {...};
    published unsafe fn at(self, index: size) -> iref T {...};
}
*/
