/*
#Intrinsic
published class Raw_Hybrid_Bounded_List[F, T]
{
    published new(.fixed, .capacity) {...}
    published var fixed: F;
    published let capacity: size;
    published get count() => size;
    published unsafe fn shorten(count: size); // unsafe because there may be iref to them
    published unsafe fn at(mut self, index: size) -> iref var T {...};
    published unsafe fn at(self, index: size) -> iref T {...};
    published fn add(mut self, value: T);
}

#Intrinsic
published class Raw_Hybrid_Bounded_List[F, Capacity: size, T]
{
    published new(.fixed) {...}
    published var fixed: F;
    // TODO should generic parameters be publicly exposed members and this getter wouldn't be needed?
    published get capacity() => Capacity;
    published get count() => size;
    published unsafe fn shorten(count: size); // unsafe because there may be iref to them
    published unsafe fn at(mut self, index: size) -> iref var T {...};
    published unsafe fn at(self, index: size) -> iref T {...};
    published fn add(mut self, value: T);
}
*/
