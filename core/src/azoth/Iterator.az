/// An iterator for a finite sequence of items.
///
/// # Remarks
/// While the sequence of items is finite, it still may be bigger than would fit into memory. There
/// is not a separate iterator type for sequences whose item count is within `size` for two reasons.
/// First, even if the item count is within `size` that doesn't mean that the items actually fit into
/// memory. That depends on both the available memory and the size of individual elements. Second,
/// `size.max` is different on different systems. Consider items returned from a database table. The
/// rows are finite, but whether they fit in `size` depends on the particular platform the code is
/// running on.
public /*move*/ trait Iterator[T ind out] <: Unbounded_Iterator[T]
{
    /// A hint as to the number of remaining elements. This value may not be correct and
    /// implementations should not fail if it is. In cases where the number of elements is known to
    /// be within a range, this should give the lower bound of the range.
    ///
    /// # Remarks
    ///
    published fn size_hint(self) -> size;

    published fn \where(mut self, predicate: (T) -> bool) -> mut Iterator[T]
        => Where_Iterator[T](self, predicate);

    // TODO replace with `to_dictionary` that selects dictionary type based on `Key_Comparer`
    // published fn to_hash_dictionary[Value](mut self, value_selector: (T) -> Value) -> mut Hash_Dictionary[T, Value]
    // {
    //     let dictionary = Hash_Dictionary[T, Value](.size_hint(), Identity_Equivalence[T]());
    //     foreach key in self
    //     {
    //         dictionary.add(key, value_selector(key));
    //     }
    //     return dictionary;
    // }

    // TODO implement operations once `yield` is implemented



    // next_chunk()? (see Rust https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.next_chunk)

    // public fn reverse(mut self) -> FiniteIterator[T]
    // {
    // }

    // order_by

    // group_by

    // concat

    // append

    // any

    // all

    // average

    // published fn last(mut self) -> T?

    // max
    // published fn max(mut self) -> T?
    //     where T <: Ordered
    //     => .max(Natural_Ordering[T]());

    // published fn max(mut self, order: Ordering[T]) -> T?
    // {
    //     if .\next() is not var value?
    //         => return none;

    //     foreach x in self
    //     {
    //         if with order => value > x
    //             { value = x; }
    //     }
    //     return value;
    // }


    // min

    // min_and_max aka range? or interval?

    /// Need names to distinguish if it aborts on empty or multiple
    // published fn single(mut self) -> T?

    // sum

    // How?
    // published const empty: const SizedIterator[T] = ...;
}
