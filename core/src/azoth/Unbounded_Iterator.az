/// An iterator for a potentially infinite sequence of items.
// TODO make this a move type to allow resource ownership by iterators
public /*move*/ trait Unbounded_Iterator[T ind out]
{
    published fn \next(mut self) -> T?;

    // TODO implement operations once `yield` is implemented

    published fn \where(mut self, predicate: (T) -> bool) -> mut Unbounded_Iterator[T]
        => Where_Iterator[T](self, predicate);

    // TODO published delete(iso self)?

    // TODO next_chunk()? (see Rust)

    // published fn flatten()

    // published fn take(mut self, count: int) -> FiniteIterator[T]

    // Many of these should return more specific types if the self type is more specific. Not sure
    // if that is the `self` type though.

    // published fn skip(mut self, count: int) -> Self

    // published fn skip_while(mut self, predicate) -> Self

    // published fn skip_until(mut self, predicate) -> Self

    // published fn take_while(mut self, predicate) -> Self

    // published fn take_until(mut self, predicate) -> Self

    // zip

    // distinct

    // distinct_by

    // prepend

    // does not do distinct the way C# except does
    // published fn except(mut self, items: FiniteIterator[T])

    // published fn except(mut self, item: T)

    // published fn first(mut self) -> T?
}
