/// A collection whose elements can be randomly accessed by an index.
public trait Indexable_Collection[T ind nonwritable out] <: Collection[T], Reversible_Iterable[T]
{
    /// O(1)
    published fn at(self, index: size) -> T;
        // requires index < .count

    published fn set_at(mut self, index: size, value: T);
        // requires index < .count

    // TODO should iterate over `ref T` to avoid copying of large value types
    published fn iterate(temp const self) -> mut Iterator[/*ref*/ T]
        => Indexable_Collection_Iterator[T](self);

    /// An `Mutable_Iterable` that allows mutating the elements of this collection
    published fn mutable_iterate(temp iso self) -> iso Iterator[/*ref var*/ T]
        => Indexable_Collection_Mutable_Iterator[T](move self);

    published fn unstable_sort(temp iso self, order: Ordering[T])
    {
        // TODO implement a high performance sort algo. See: introsort, pdqsort, ipnsort
        // TODO support `move` element types?
        // TODO think about safety of a comparison that modifies something about the elements, see
        //      https://github.com/Voultapher/sort-research-rs/blob/main/writeup/sort_safety/text.md
        .insertion_sort(0, .count-1, order);
    }

    fn insertion_sort(mut self, start_index: size, end_index: size, order: Ordering[T])
    {
        // TODO support using `with order`
        foreach i in (start_index+1)..end_index
        {
            // TODO support using foreach for this
            var j = i as! size;
            // TODO a way to remove the duplicate .at() calls?
            while j > 0 and order.compare(.at(j-1), .at(j)) > 0
            {
                // TODO add and use a swap method
                let t = .at(j-1);
                .set_at(j-1, .at(j));
                .set_at(j, t);
                j -= 1;
            }
        }
    }
}
