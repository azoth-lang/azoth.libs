// TODO make `T` `shareable ind`
published trait Set[T /*shareable*/ ind] <: Collection[T]
{
    // TODO allow constructors in traits so these can be called like constructors

    published fn create() -> Hash_Set[T]
        // where T: Hashable
        => Hash_Set[T]();

    //TODO published get comparer(self) -> Key_Comparer[shareable T];

    // published fn create_by_identity() -> Hash_Set[T]
    //     where T: ReferenceType
    //     => Hash_Set[T](Identity_Equivalence());

    // TODO using `shareable T` might allow allow `T nowritable out`
    published fn contains(self, lent value: /*shareable*/ T) -> bool;

    published fn add(mut self, value: T) -> bool;

    // TODO can the iterator become part of the sharing set and cause problems?
    published fn add(mut self, values: mut Iterator[T])
    {
        foreach value in values
            { .add(value); }
    }

    published fn remove(mut self, lent value: T) -> bool;
}
