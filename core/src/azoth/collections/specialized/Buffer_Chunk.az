/// A chunk of a buffer stored as a linked list of chunks. Each chunk is a bounded list and has a
/// reference to the next chunk.
published class Buffer_Chunk[T ind] <: Collection[T]
    // invariant .count <= .capacity
{
    // const DefaultCapacity: size = 16;

    // TODO use private inheritance or make Buffer_Chunk a struct to avoid extra indirection
    var items: mut Raw_Hybrid_Bounded_List[mut Buffer_Chunk[T]?, T];

    published init(mut self)
        // #prove ensures .count == 0 and .capacity == DefaultCapacity
    {
        let DefaultCapacity: size = 16; // TODO make this a constant
        .items = Raw_Hybrid_Bounded_List[mut Buffer_Chunk[T]?, T](none, DefaultCapacity);
    }

    published init(mut self, capacity: size)
        // #prove ensures .count == 0 and .capacity == capacity
    {
        .items = Raw_Hybrid_Bounded_List[mut Buffer_Chunk[T]?, T](none, capacity);
    }

    published init(mut self, capacity: size, next_chunk: mut Buffer_Chunk[T])
        // #prove ensures .count == 0 and .capacity == capacity
    {
        .items = Raw_Hybrid_Bounded_List[mut Buffer_Chunk[T]?, T](next_chunk, capacity);
    }

    published get next_chunk(mut self) -> mut Buffer_Chunk[T]?
        => .items.prefix;

    published get capacity(self) -> size
        => .items.capacity;

    published get is_full(self) -> bool
        => .items.count == .items.capacity;

    published get count(self) -> size
        => .items.count;

    published fn at(self, index: size) -> T
        // requires index < .count
    {
        let count = .items.count;
        if index >= count => ABORT("at(): index out of bounds");
        return .items.at(index);
    }

    published fn set_at(mut self, index: size, value: T)
        // requires index < .count
    {
        let count = .items.count;
        if index >= count => ABORT("set_at(): index out of bounds");
        .items.at(index) = value;
    }

    published fn try_add(mut self, value: T) -> bool
        // #prove ensures old.count == .count + 1
    {
        if .items.count == .items.capacity => return false;
        .items.add(value);
        return true;
    }

    published fn remove_at(mut self, index: size) -> T
        // requires index < .count
        // #prove ensures old.count() == .count - 1
    {
        let count = .items.count;
        if index >= count => ABORT("remove_at(): index out of bounds");
        let item = .items.at(index);
        foreach i in index..<(count - 1)
            { .items.at(i as! size) = .items.at(i as! size + 1); }
        .items.shrink(count - 1);
        return item;
    }

    published fn clear(mut self)
        // #prove ensures .count == 0
        => .items.shrink(0);
}
