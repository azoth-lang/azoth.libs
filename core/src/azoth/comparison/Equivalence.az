/// An equivalence relation on a type `T`.
///
/// # Remarks
///
/// An equivalence relation divides the values of `T` into subsets that are equivalence classes.
///
/// In mathematical terms, this is technically a setoid since it is a type and an equivalence
/// relation on that type.
///
/// These are allowed on mutable values to enable comparing objects by current value.
published const trait Equivalence[T in] <: Partial_Equivalence[T]
{
    /// Determine whether the two values are equivalent according to this equivalence relation.
    ///
    /// # Remarks
    ///
    /// This method must define a relationship, here represented with the '∼' symbol, that has the
    /// following properties:
    ///
    /// * reflexivity: a ∼ a
    /// * symmetry: a ∼ b if and only if b ∼ a
    /// * transitivity: if a ∼ b and b ∼ c then a ∼ c
    /// * consistency: if a ∼ b and no field changes on a or b, then a ∼ b (is still true)
    ///
    /// Implementations that do not have these properties can lead to unexpected behavior.
    ///
    /// It is important to understand that an equivalence relation is independent of equality. Just
    /// because a type has an equality relation such that a =/= b does mean not that it can't be the
    /// case that a ∼ b.
    ///
    /// It should also be noted that consistency applies only when values are not mutated. So a R b
    /// can change value if a or b change.
    published fn equivalent(self, lent first: T, lent second: T) -> bool /*overrides*/;
}
