public class Stack[T ind nonwritable out] <: Container[T], Collection[T]
{
    let first_chunk: mut Buffer_Chunk[T];
    var chunk: mut Buffer_Chunk[T];
    var count: size;
    var cached_chunk: mut Buffer_Chunk[T]?;

    public init(mut self)
    {
        .chunk = .first_chunk = Buffer_Chunk[T]();
    }

    // TODO name: with_capacity
    published init(mut self, var capacity: size)
    {
        if capacity < 16 => capacity = 16;
        .chunk = .first_chunk = Buffer_Chunk[T](capacity);
    }

    // public init(items: Iterable[T])
    // {
    //     self();
    //     foreach item in items
    //         { add(item); }
    // }

    // #Inline(.Always)
    public get count(self) -> size
        => .count;

    public fn peek(self) -> T?
    {
        if .is_empty => return none;
        return .chunk.at(.chunk.count - 1);
    }

    public fn pop(mut self) -> T?
        // overrides remove
    {
        if .is_empty => return none;
        let item = .chunk.remove_at(.chunk.count - 1);
        if .chunk.is_empty and .chunk.next_chunk is let next_chunk?
        {
            .cached_chunk = .chunk;
            .chunk = next_chunk;
        }
        return item;
    }

    // #Inline(.Always)
    public fn push(mut self, item: T) -> void
        // overrides add
    {
        if not .chunk.try_add(item)
        {
            if .cached_chunk is let cached_chunk?
            {
                .chunk = cached_chunk;
                .cached_chunk = none;
            }
            else
            {
                .chunk = Buffer_Chunk[T](.count, .chunk);
            }
            // TODO check result is true
            .chunk.try_add(item);
        }
    }

    // #Inline(.Always)
    public fn clear(mut self) -> void
    {
        if .count == 0 => return;

        .count = 0;
        if .chunk ≡/≡ .first_chunk
        {
            // drop all but first chunk
            .chunk = .first_chunk;
            .cached_chunk = none;
        }

        // clear out the first chunk
        .chunk.clear();
    }
}
