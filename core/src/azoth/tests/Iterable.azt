namespace iterable
{
    #Test
    public fn \"Can read while iterating"()
    {
        // TODO let subject = Mock[Collection[int]]
        let subject = Fake_Iterable();

        let iterator: mut Iterator[int] = subject.iterate();

        subject.test_read();

        let end: int? = iterator.\next();

        Assert.that(end).is_none();
    }

    #Test
    public fn \"Cannot mutate while iterating"()
    {
        // TODO let subject = Mock[Collection[int]]
        let subject: mut = Fake_Iterable();

        {
            let iterator: mut Iterator[int] = subject.iterate();

            // TODO next line does not compile
            // subject.test_mutate();

            let end: int? = iterator.\next();

            Assert.that(end).is_none();
        }

        subject.test_mutate();
    }

    class Fake_Iterable <: Iterable[int]
    {
        published fn iterate(temp const self) -> mut Iterator[int]
            => Fake_Iterator(self);

        public fn test_read(self) { }

        public fn test_mutate(mut self) { }
    }

    class Fake_Iterator <: Iterator[int]
    {
        let iterable: temp const Fake_Iterable;

        public init(mut self, .iterable) { }

        published fn \next(mut self) -> int?
            => none;
    }
}
