/// A 7-bit ASCII string.
///
/// Eventually, this should support slice operations which represent views onto a portion of an
/// existing string. That is not supported yet.
published const copy struct ascii_string <: Iterable[ascii_char]
{
    /// The index of the start of the string data in `chars`.
    public let start: size;
    /// The length of the string.
    published let length: size;
    // TODO use iref var?
    public let bytes: const Raw_Hybrid_Bounded_List[void, byte];

    public init(self, .start, .length, .bytes) { }

    published init(self, value: string)
    {
        .start = value.start;
        .length = value.utf8_byte_count;
        // TODO validate that this string is actually ASCII
        .bytes = value.raw_bytes();
    }

    published fn iterate(self) -> mut Iterator[ascii_char]
        => new ASCII_String_Iterator(self);

    published fn slice(self, start_index: size) -> ascii_string
    {
        if start_index >= .length => ABORT("start_index is not in the ascii_string");
        return ascii_string(.start + start_index, .length - start_index, .bytes);
    }

    published fn slice(self, start_index: size, length: size) -> ascii_string
    {
        if start_index >= .length => ABORT("start_index is not in the ascii_string");
        // Avoid overflow by subtracting instead of adding
        if length > .length - start_index => ABORT("start_index + length is not in the ascii_string");
        return ascii_string(.start + start_index, length, .bytes);
    }

    published fn split(self, split_on: ascii_char) -> mut Iterator[ascii_string]
        => new ASCII_String_Split_Iterator(self, split_on);

    public fn equals(self, other: ascii_string?) -> bool
    {
        if other is let o?
        {
            if .length =/= o.length => return false;
            foreach i in 0..<o.length
            {
                 if .bytes.at(i as! size + .start) =/= o.bytes.at(i as! size + o.start)
                    => return false;
            }
            return true;
        }
        return false;
    }
}
