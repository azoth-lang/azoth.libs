import intrinsics;

/// A Unicode string.
///
/// # Remarks
///
/// While the `string` struct is encoding agnostic, internally the string is stored in UTF-8. Since
/// it is encoding agnostic, the Unicode string must be well-formed (see
/// [Well-formed](https://www.unicode.org/versions/Unicode16.0.0/core-spec/chapter-3/#G32849) in the
/// Unicode spec). Normally all instances of `string` will contain a well-formed Unicode string.
/// However, if the unsafe methods are improperly used, then a `string` could be constructed that
/// isn't a well-formed Unicode string. In that case the behavior of the type is unpredictable and
/// will likely produce errors.
published const struct string
{
    /// The index of the start of the string data in `bytes`.
    public let start: size;
    /// The number of bytes in the string when encoded in UTF8.
    published let utf8_byte_count: size;
    // TODO use iref var?
    let bytes: const Raw_Hybrid_Bounded_List[void, byte];

    // Constructor is private because this is a temporary way of constructing strings for constants
    /* unsafe */ init(mut self, bytes: const Raw_Hybrid_Bounded_List[void, byte], start: size, utf8_byte_count: size)
    {
        .bytes = bytes;
        .start = start;
        .utf8_byte_count = utf8_byte_count;
    }

    published init(mut self, value: ascii_string)
    {
        .start = value.start;
        .utf8_byte_count = value.length;
        .bytes = value.bytes;
    }

    // published init(mut self)
    // {
    //     self.init(16);
    // }

    /*published init(mut self, var capacity: size)
    {
        if capacity < 16 => capacity = 16;
        .bytes = Raw_Hybrid_Bounded_List[void, byte](capacity);
        .start = 0;
        .utf8_byte_count = 0;
    }*/

    // init from(mut self, bytes: iso Raw_Bounded_List[byte])
    // {
    //     .bytes = bytes;
    //     .start = 0;
    //     .utf8_byte_count = .bytes.count();
    // }

    // TODO if .bytes can be replaced, then this is wrong
    public fn raw_bytes(self) -> const Raw_Hybrid_Bounded_List[void, byte]
        => .bytes;

    /*published get byte_capacity(self) -> size
        => .bytes.capacity;*/

    /*public set byte_capacity(mut self, capacity: size)
        // requires .utf8_byte_count <= capacity
        => NOT_IMPLEMENTED();*/

    /*public fn append(mut self, value: string)
        => NOT_IMPLEMENTED();

    fn ensure_capacity(mut self, capacity: size)
    {
        if capacity < .bytes.capacity => return;
        //let new_capacity = max(capacity, .bytes.capacity());
        NOT_IMPLEMENTED();
    }*/

    // Once it is supported, this should be a copy constructor
    // published safe init(other: string)
    // {
    //     self.utf8_byte_count = other.utf8_byte_count;
    //     self.bytes = mem_allocate(self.utf8_byte_count);
    //     unsafe(mem_copy(other.bytes, self.bytes, self.utf8_byte_count));
    // }

    /// Concatenate two strings producing a new one
    // published /* safe */ fn concat(self, other: string) -> iso string
    // {
    //     let new_byte_count = .utf8_byte_count + other.utf8_byte_count;
    //     let new_bytes: mut = Raw_Bounded_List[byte](new_byte_count);
    //     foreach i: size in .start..<(.start+.utf8_byte_count)
    //     {
    //         new_bytes.add(.bytes.at(i));
    //     }
    //     foreach i: size in other.start..<(other.start+other.utf8_byte_count)
    //     {
    //         new_bytes.add(other.bytes.at(i));
    //     }
    //     return string.from(new_bytes);
    // }
    //
    // published safe fn equals(self, other: string) -> bool
    // {
    //     if self.utf8_byte_count =/= other.utf8_byte_count => return false;

    //     foreach i: size in 0..<other.utf8_byte_count
    //     {
    //         if mem_get_byte(self.bytes+i) =/= mem_get_byte(other.bytes+i)
    //         {
    //             return false;
    //         }
    //     }

    //     return true;
    // }

    // Pad this string out to a given length using the supplied string
    // Currently only works correctly if the string is comprised only of ASCII
    // characters and `with` is only a single character
    // published safe fn pad_left(self, total_length: size, pad_with: string) -> string$owned
    // {
    //     if self.bytes >= total_length => return string(self);

    //     let new_bytes = mem_allocate(total_length);
    //     let padding = total_length - self.utf8_byte_count;
    //     unsafe
    //     {
    //         mem_copy(self.bytes, new_bytes + padding, self.utf8_byte_count);
    //         // foreach i: size in 0..<padding
    //         // {
    //         //     mem_copy(pad_with.bytes, new_bytes+i, 1);
    //         // }
    //         return string(total_length, new_bytes);
    //     }
    // }
}
