// A Box[T] is a container for a value type `T` allocated on the heap. Like the
// Rust Box type, it allows mutation of the boxed value.
public mut struct Box[T]
    where T: struct
{
    let value: @T;

    public init[params Args: List[type]](params args: tuple_of(Args))
        // where T has a constructor taking Args?
        // where T.type <: init(params Args)
    {
        self.value = allocate[T]();
        // init the pointed to value
        // init(value) T(params args);
    }

    // TODO maybe instead of overloading `.` we should overload `^` and treat
    // this more like a pointer.
    public safe operator _.(ref mut self) -> ref mut T
    {
        return unsafe(ref mut ^value);
    }

    public safe operator _.(ref self) -> ref T
    {
        return unsafe(ref ^value);
    }

    public safe operator _=_(ref mut self, value: T) -> void
    {
        unsafe(^self.value = value);
    }

    public safe delete()
    {
        unsafe(value^.delete());
        free(value);
    }
}
