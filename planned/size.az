public extend struct size
{
    public const min_value: size = 0;
    public const max_value: size = 0.bit_not();

    /// Returns true if and only if `self == 2^k` for some `k`.
    public fn is_power_of_two(self) -> bool
    {
        // If we subtract one from a power of two then then all unset bits after the
        // only set bit become set; and the set bit become unset.
        // For example:
        // 4 == 0b100, 3 == 0b011
        // Thus if we do a bitwise-and on them, we get zero. The edge case is the number 0.
        return value =/= 0 and value.bit_and(value.wrapping_subtract(1)) == 0;
    }
}

public fn is_power_of_two(value: size) -> bool
{
    // If we subtract one from a power of two then then all unset bits after the
    // only set bit become set; and the set bit become unset.
    // For example:
    // 4 == 0b100, 3 == 0b011
    // Thus if we and them together, we get zero. The edge case is the number 0.
    return value =/= 0 and value.bit_and(value.wrapping_subtract(1)) == 0;
}
