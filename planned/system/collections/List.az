using system.comparision;

public mut class List[T]
{
    private const DEFAULT_CAPACITY = 4;

    private var public get count: size;
    private var buckets: Unsafe_Array[T];

    #Inline(.Always)
    public get capacity(self) -> size { return buckets.count; }
    public set capacity(mut self, value: size) -> void
        requires value >= count
    {
        if value =/= capacity
        {
            if value > 0
            {
                NOT_IMPLEMENTED();
            }
            else // Since value == 0 >= count, there are no items to delete
                { buckets = Unsafe_Array[T].empty; }
        }
    }

    public new()
    {
        .count = 0;
        .values = Unsafe_Array[T].empty;
    }

    private fn ensure_capacity(min: size) -> void
        ensures capacity >= min
    {
        if capacity < min
        {
            var new_capacity = max(DEFAULT_CAPACITY, capacity);
            while new_capacity < min
                { new_capacity *= 2; }
            capacity = new_capacity; // TODO resizes buckets
        }
    }

    public safe fn add(mut self, value: T) -> void
        ensures count == old(count) + 1
        ensures capacity >= count
    {
        ensure_capacity(count+1);
        unsafe(buckets.at(count) = value);
        count += 1;
    }

    public safe delete()
    {
        foreach i in 0..<count
        {
            delete buckets[i];
        }
    }
}
