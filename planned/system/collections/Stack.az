// TODO move to system.collections package

public mut class Stack[T]: Container[T]
{
    private let items: mut List[T];

    public new()
    {
        .items = new List[T]();
    }

    public new with_capacity(capacity: size)
    {
        items = new List[T].with_capacity(capacity);
    }

    public new(items: Iterable[T])
    {
        self();
        foreach item in items
            { add(item); }
    }

    #Inline(.Always)
    public get count() -> size
    {
        return items.count;
    }

    #Inline(.Always)
    public fn clear(mut self) -> void
    {
        items.clear();
    }

    public fn peek(self) -> T?
    {
        // TODO handle stack empty
        return items.at(count-1);
    }

    public fn pop(mut self) -> T?
    {
        // TODO handle stack empty
        let item = items[count-1];
        items.count -= 1;
        return items.Shrink();
    }

    #Inline(.Always)
    public fn push(mut self, item: T) -> void
    {
        items.add(item);
    }
}
