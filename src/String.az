using intrinsics;

/// This is a temporary version of the `String` class. Because the language
/// doesn't support pointers yet, it uses a set of primitive memory manipulation
/// functions that hide pointers as `size` values.
///
/// The advantage of this approach is that it is easier to add functions to the
/// String class. It also provides tests of language functionality.
///
/// At the moment, this string class leaks all memory. Once destructors work
/// correctly, that can be fixed.
published class String
{
    // const DefaultCapacity: size = 16;

    /// The index of the start of the string data in `bytes`.
    public let start: size;
    /// The number of bytes in the string when encoded in UTF8.
    published let byte_count: size;
    // TODO use iref var?
    var bytes: mut Raw_Bounded_List[byte];

    // Constructor is private because this is a temporary way of constructing strings for constants
    /* unsafe */ new(self, bytes: Raw_Bounded_List[byte], start: size, byte_count: size)
    {
        .bytes = bytes;
        .start = start;
        .byte_count = byte_count;
    }

    // published new(mut self)
    // {
    //     self.new(16);
    // }

    published new(mut self, var capacity: size)
    {
        if capacity < 16 => capacity = 16;
        .bytes = new Raw_Bounded_List[byte](capacity);
        .start = 0;
        .byte_count = 0;
    }

    // new from(mut self, bytes: iso Raw_Bounded_List[byte])
    // {
    //     .bytes = bytes;
    //     .start = 0;
    //     .byte_count = .bytes.count();
    // }

    // TODO if .bytes can be replaced, then this is wrong
    public fn raw_bytes(self) -> Raw_Bounded_List[byte]
    {
        return .bytes;
    }

    published fn byte_capacity(self) -> size
    {
        return .bytes.capacity();
    }

    public fn set_byte_capacity(mut self, capacity: size)
        // requires .byte_count <= capacity
    {
        NOT_IMPLEMENTED();
    }

    public fn append(mut self, value: String)
    {
        NOT_IMPLEMENTED();
    }

    fn ensure_capacity(mut self, capacity: size)
    {
        if capacity < .bytes.capacity() => return;
        //let new_capacity = max(capacity, .bytes.capacity());
        NOT_IMPLEMENTED();
    }

    // Once it is supported, this should be a copy constructor
    // published safe new(other: String)
    // {
    //     self.byte_count = other.byte_count;
    //     self.bytes = mem_allocate(self.byte_count);
    //     unsafe(mem_copy(other.bytes, self.bytes, self.byte_count));
    // }

    /// Concatenate two strings producing a new one
    // published /* safe */ fn concat(self, other: String) -> iso String
    // {
    //     let new_byte_count = .byte_count + other.byte_count;
    //     let new_bytes: mut = new Raw_Bounded_List[byte](new_byte_count);
    //     foreach i: size in .start..<(.start+.byte_count)
    //     {
    //         new_bytes.add(.bytes.at(i));
    //     }
    //     foreach i: size in other.start..<(other.start+other.byte_count)
    //     {
    //         new_bytes.add(other.bytes.at(i));
    //     }
    //     return new String.from(new_bytes);
    // }
//
    // published safe fn equals(self, other: String) -> bool
    // {
    //     if self.byte_count =/= other.byte_count => return false;

    //     foreach i: size in 0..<other.byte_count
    //     {
    //         if mem_get_byte(self.bytes+i) =/= mem_get_byte(other.bytes+i)
    //         {
    //             return false;
    //         }
    //     }

    //     return true;
    // }

    // Pad this String out to a given length using the supplied string
    // Currently only works correctly if the string is comprised only of ASCII
    // characters and `with` is only a single character
    // published safe fn pad_left(self, total_length: size, pad_with: String) -> String$owned
    // {
    //     if self.bytes >= total_length => return new String(self);

    //     let new_bytes = mem_allocate(total_length);
    //     let padding = total_length - self.byte_count;
    //     unsafe
    //     {
    //         mem_copy(self.bytes, new_bytes + padding, self.byte_count);
    //         // foreach i: size in 0..<padding
    //         // {
    //         //     mem_copy(pad_with.bytes, new_bytes+i, 1);
    //         // }
    //         return new String(total_length, new_bytes);
    //     }
    // }
}
