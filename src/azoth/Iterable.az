// TODO what is the right way to represent this?
public trait Iterable[T out]
{
    // TODO should iterate over `ref T` to avoid copying of large value types
    published fn iterate(temp const self) -> mut Iterator[/*ref*/ T];

    // TODO implicit conversion to `Iterator[T]`

    // --------------------- Iterator[T] forwards
    // TODO why does this compile? The `predicate` shouldn't be allowed to be shared with the `lent`
    // return value. Is it because funtion types are currently effectively immutable?
    published fn \where(temp const self, predicate: (T) -> bool) -> mut Iterator[T]
        => .iterate().\where(predicate);
}
