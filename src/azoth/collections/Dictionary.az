// Note: `Key` should be `ind` because when using identity equivalence, temp const dictionary shouldn't change the key type.
// Note: the `Value` could `read out` meaning that once the collection is can only be read, that
// parameter acts like an `out` parameter. However, the `Key` can't be that because it must still be
// passed into `at()` in order to retrieve values. Thus `Key` may only ever vary by the capability.
published trait Dictionary[Key ind, Value ind] <: Collection[Key_Value_Pair[Key, Value]]
{
    // TODO support creating either a Hash_Dictionary or Sorted_Dictionary depending on the type of key comparer
    // published fn create(key_comparer: Key_Comparer[Key]) -> Dictionary[Key, Value]
    // {
    // }

    published fn get_key_comparer(self) -> Key_Comparer[read|>Key];

    // TODO keys: Set[Key]
    // TODO values: Collection[Value]

    published fn contains(self, lent key: Key) -> bool;

    published fn at(self, lent key: Key) -> Value?;

    published fn set_at(mut self, key: Key, value: Value);

    published fn get_at_or_add(mut self, key: Key, value: Value) -> Value;

    published fn try_add(mut self, key: Key, value: Value) -> bool;

    published fn try_remove(mut self, lent key: Key) -> Value?;
}
