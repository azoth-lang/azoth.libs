published class List[T] <: Collection[T]
{
    var items: mut Raw_Bounded_List[T];

    published new(mut self)
    {
        .items = new Raw_Bounded_List[T](2);
    }

    // TOOD name: with_capacity
    published new(mut self, var capacity: size)
    {
        if capacity < 2 => capacity = 2;
        .items = new Raw_Bounded_List[T](capacity);
    }

    published fn get_capacity(self) -> size
    {
        return .items.get_capacity();
    }

    published fn get_count(self) -> size
    {
        return .items.get_count();
    }

    published fn at(self, index: size) -> T
    {
        let count = .items.get_count();
        if index >= count => ABORT("at(): index out of bounds");
        return .items.at(index);
    }

    published fn set_at(mut self, index: size, value: T)
    {
        let count = .items.get_count();
        if index >= count => ABORT("set(): index out of bounds");
        .items.set_at(index, value);
    }

    published fn add(mut self, value: T)
    {
        .ensure_capacity(.items.get_count() + 1);
        .items.add(value);
    }

    fn ensure_capacity(mut self, new_count: size)
    {
        var capacity = .items.get_capacity();
        if new_count <= capacity => return;
        while capacity < new_count { capacity *= 2; }
        let count = .items.get_count();
        let new_items: mut = new Raw_Bounded_List[T](capacity);
        foreach i in 0..<count
            { new_items.add(.items.at(i)); }
        .items = new_items;
    }

    published fn remove_at(mut self, index: size) -> T
    {
        let item = .items.at(index);
        let count = .items.get_count();
        foreach i in index..<(count - 1)
            { .items.set_at(i, .items.at(i + 1)); }
        .items.shrink(count - 1);
        return item;
    }

    published fn clear(mut self)
    {
        .items.shrink(0);
    }
}
