published class List[T] <: Collection[T]
{
    var items: mut Buffer[T];

    published new(mut self)
    {
        .items = new Buffer[T]();
    }

    // TOOD name: with_capacity
    published new(mut self, var capacity: size)
    {
        if capacity < 2 => capacity = 2;
        .items = new Buffer[T](capacity);
    }

    published fn get_capacity(self) -> size
    {
        return .items.get_capacity();
    }

    published fn get_count(self) -> size
    {
        return .items.get_count();
    }

    published fn at(self, index: size) -> T
        // requires index < .get_count()
    {
        return .items.at(index);
    }

    published fn set_at(mut self, index: size, value: T)
        // requires index < .get_count()
    {
        .items.set_at(index, value);
    }

    published fn add(mut self, value: T)
    {
        .items.add(value);
    }

    published fn remove_at(mut self, index: size) -> T
        // requires index < .get_count()
    {
        return .items.remove_at(index);
    }

    published fn clear(mut self)
    {
        .items.clear();
    }
}
