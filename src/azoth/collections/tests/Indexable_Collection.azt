namespace indexable_collection
{
    #Test
    public fn \"Can iterate empty forwards"()
    {
        // TODO let subject = Mock[Collection[int]]
        let subject = new Fake_Collection(0);

        let iterator: mut Iterator[int] = subject.iterate();

        let end: int? = iterator.\next();

        Assert.that(end).is_none();
    }

    #Test
    public fn \"Can iterate one item forwards"()
    {
        // TODO let subject = Mock[Collection[int]]
        let subject = new Fake_Collection(1);

        let iterator: mut Iterator[int] = subject.iterate();

        let first: int? = iterator.\next();
        // Getting the count shows that the collection can be read while iterating
        let count = subject.get_count();
        let end: int? = iterator.\next();

        Assert.that(first).equals(0);
        Assert.that(end).is_none();
        //Assert.that(count).equals(1);
    }

    #Test
    public fn \"Can mutably iterate empty forwards"()
    {
        // TODO let subject = Mock[Collection[int]]
        let subject: mut = new Fake_Collection(0);

        let iterator: mut Iterator[int] = subject.mutable().iterate();

        let end: int? = iterator.\next();

        Assert.that(end).is_none();
    }

    #Test
    public fn \"Can mutably iterate one item forwards"()
    {
        // TODO let subject = Mock[Collection[int]]
        let subject: mut = new Fake_Collection(1);

        let iterator: mut Iterator[int] = subject.mutable().iterate();

        let first: int? = iterator.\next();
        // TODO getting count does not compile
        // Getting the count shows that the collection can be read while iterating
        let count = subject.get_count();
        let end: int? = iterator.\next();

        Assert.that(first).equals(0);
        Assert.that(end).is_none();
        //Assert.that(count).equals(1);
    }

    class Fake_Collection <: Indexable_Collection[int]
    {
        let count: size;

        public new(mut self, count: size)
        {
            .count = count;
        }

        published fn get_count(self) -> size
            => .count;

        published fn at(self, index: size) -> int
            => index;
    }
}
