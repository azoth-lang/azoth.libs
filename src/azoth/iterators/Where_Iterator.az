// TODO should not implement Iterator[T] of source doesn't
public class Where_Iterator[T out] <: Iterator[T], Unbounded_Iterator[T]
    // TODO how does the compiler guarentee that it is safe to use `ref S` for `T`?
    // It needs to know that `T` won't be saved into a field in this class.
{
    let iterator: mut Unbounded_Iterator[T];
    let predicate: (T) -> bool;

    public new(mut self, .iterator, .predicate) { }

    /// # Notes
    /// There is no way of knowing how many elements will be left after filtering, so the lower
    /// bound on the size is always zero.
    published fn size_hint(self) -> size => 0;

    published fn \next(mut self) -> T?
    {
        while .iterator.\next() is let value?
        {
            if .predicate(value)
                => return value;
        }
        return none;
    }
}

// ----------------------------------


// public sealed class Where_Iterator[Source, T = _] <: Unbounded_Iterator[T]
//     where Source <: Unbounded_Iterator[T]
//     { ... }

// This seems to be ok because whether `Source <: Unbounded_Iterator[T]` is a compile time fact
// of the instance. Note that even if the Source implements iterator, what matters is the type it
// was constructed with.
// public extend Where_Iterator[Source, T] <: Iterator[T]
//     where Source <: Iterator[T]
// {
// }

// ----------------------------------

// public class Where_Iterator[T] <: Unbounded_Iterator[T]
//     forSome type Source <: Unbounded_Iterator[T]
// {
//     let iterator: mut Source;
//     let predicate: (T) -> bool;

//     public new(mut self, .iterator, .predicate) { }

//     published fn \next(mut self) -> T?
//     {
//         while .iterator.\next() is let value?
//         {
//             if .predicate(value)
//                 => return value;
//         }
//         return none;
//     }
// }


