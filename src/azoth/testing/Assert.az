published /*sealed*/ abstract class Assert
{
    // TODO make generic using extensions
    // published fn that[T](value: T) -> Assert[T]
    //     => new Assert[T](value);

    published fn that(value: bool) -> AssertOnBool
        => new AssertOnBool(value);

    published fn that(value: int?) -> AssertOnOptionalInt
        => new AssertOnOptionalInt(value);
}

published /*sealed*/ class Assert[T]
{

}


published /*sealed*/ class AssertOnBool: Assert[bool]
{
    let value: bool;

    published new(self, .value) { }

    published fn is_true(self)
    {
        if not .value
            { ABORT("Expected true, but was false."); }
    }

    published fn is_false(self)
    {
        if not .value
            { ABORT("Expected false, but was true."); }
    }
}

published /*sealed*/ class AssertOnOptionalInt: Assert[int?]
{
    let value: int?;

    published new(self, .value) { }

    published fn is_none(self)
    {
        if .value is let _? { }
        else
            { ABORT("Expected none, but was an int."); }
    }

    published fn equals(self, value: int?)
    {
        if .value =/= value
            { ABORT("Expected value not found."); }
    }
}
