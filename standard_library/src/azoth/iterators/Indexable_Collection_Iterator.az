class Indexable_Collection_Iterator[T] <: Iterator[T]
{
    let collection: temp const Indexable_Collection[T];
    var index: size;

    public new(mut self, .collection)
    {
        .index = 0;
    }

    published fn size_hint(self) -> size => .collection.count - .index;

    published fn \next(mut self) -> T?
    {
        // Note it is not a concern that the collection size could change, because it is `temp const`
        if .index >= .collection.count
            { return none; }

        let item = .collection.at(.index);
        .index += 1;
        return item;
    }
}
