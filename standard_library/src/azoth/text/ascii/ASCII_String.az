/// A 7-bit ASCII string.
///
/// Eventually, this should support slice operations which represent views onto a portion of an
/// existing string. That is not supported yet.
published const struct ASCII_String
{
    /// The index of the start of the string data in `chars`.
    public let start: size;
    /// The length of the string.
    published let length: size;
    // TODO use iref var?
    public let bytes: const Raw_Hybrid_Bounded_List[void, byte];

    public init(mut self, .start, .length, .bytes) { }

    published init(mut self, value: String)
    {
        .start = value.start;
        .length = value.utf8_byte_count;
        // TODO validate that this string is actually ASCII
        .bytes = value.raw_bytes();
    }

    published fn split(self, split_on: ascii_char) -> mut Iterator[ASCII_String]
        => new ASCII_String_Split_Iterator(self, split_on);

    public fn equals(self, other: ASCII_String?) -> bool
    {
        if other is let o?
        {
            if .length =/= o.length => return false;
            /*foreach i in 0..o.length
                => if .bytes.at(i as size) =/= o.bytes.at(i as size)
                    => return false;*/
            NOT_IMPLEMENTED();
            return true;
        }
        return false;
    }
}
