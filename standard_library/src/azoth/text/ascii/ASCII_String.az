/// A 7-bit ASCII string.
///
/// Eventually, this should support slice operations which represent views onto a portion of an
/// existing string. That is not supported yet.
published const struct ASCII_String
{
    /// The index of the start of the string data in `chars`.
    public let start: size;
    /// The length of the string.
    published let length: size;
    // TODO use iref var?
    /*protected*/ let chars: const Raw_Hybrid_Bounded_List[void, byte];

    /*published new(mut self, var capacity: size)
    {
        if capacity < 16 => capacity = 16;
        .chars = new Raw_Bounded_List[ascii_char](capacity);
        .start = 0;
        .length = 0;
    }*/

    published init(mut self, value: String)
    {
        .start = value.start;
        .length = value.utf8_byte_count;
        // TODO validate that this string is actually ASCII
        .chars = value.raw_bytes();
    }

    published fn split(self, char: ascii_char) -> mut Iterator[ASCII_String]
    {
        NOT_IMPLEMENTED();
    }

    // public fn equals(self, other: ASCII_String?) -> bool
    // {
    //     /*if other is let o?
    //     {
    //         if .length =/= o.length => return false;
    //         foreach i in 0..o.length
    //             => if .chars.at(i) =/= o.chars.at(i)
    //                 => return false;
    //         return true;
    //     }
    //     return false;*/
    //     NOT_IMPLEMENTED();
    // }
}
